using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using Net.Share;
using Net.Event;
#if SERVER
using Net.System;
using Cysharp.Threading.Tasks;
using {USING};
#endif
using BooleanObs = Net.Common.PropertyObserverAuto<bool>;
using ByteObs = Net.Common.PropertyObserverAuto<byte>;
using SByteObs = Net.Common.PropertyObserverAuto<sbyte>;
using Int16Obs = Net.Common.PropertyObserverAuto<short>;
using UInt16Obs = Net.Common.PropertyObserverAuto<ushort>;
using CharObs = Net.Common.PropertyObserverAuto<char>;
using Int32Obs = Net.Common.PropertyObserverAuto<int>;
using UInt32Obs = Net.Common.PropertyObserverAuto<uint>;
using SingleObs = Net.Common.PropertyObserverAuto<float>;
using Int64Obs = Net.Common.PropertyObserverAuto<long>;
using UInt64Obs = Net.Common.PropertyObserverAuto<ulong>;
using DoubleObs = Net.Common.PropertyObserverAuto<double>;
using DateTimeObs = Net.Common.PropertyObserverAuto<System.DateTime>;
using BytesObs = Net.Common.PropertyObserverAuto<byte[]>;
using StringObs = Net.Common.PropertyObserverAuto<string>;

{NAMESPACE_BEGIN}
    /// <summary>
    /// 此类由MySqlDataBuild工具生成, 请不要在此类编辑代码! 请新建一个类文件进行分写
    /// <para>MySqlDataBuild工具提供Rpc自动同步到mysql数据库的功能, 提供数据库注释功能</para>
    /// <para><see href="此脚本支持防内存修改器, 需要在uniyt的预编译处添加:ANTICHEAT关键字即可"/> </para>
    /// MySqlDataBuild工具gitee地址:https://gitee.com/leng_yue/my-sql-data-build
    /// </summary>
    public partial class {TYPENAME} : IDataRow
    {
        [Net.Serialize.NonSerialized]
        [Newtonsoft_X.Json.JsonIgnore]
        public DataRowState RowState { get; set; }
    #if SERVER
        internal Net.Server.NetPlayer client;
    #endif
        /// <summary>当属性被修改时调用, 参数1: 哪个字段被修改(表名_字段名), 参数2:被修改的值</summary>
        [Net.Serialize.NonSerialized]
        [Newtonsoft_X.Json.JsonIgnore]
        public Action<{RPCHASHTYPE}, object> OnValueChanged;

        private {KETTYPE} {KEYNAME1};
        /// <summary>{KEYNOTE}</summary>
        public {KETTYPE} {KEYNAME2} { get { return {KEYNAME1}; } set { this.{KEYNAME1} = value; } }

    [split] 
        private readonly {FIELDTYPE1} {FIELDNAME1} = new {FIELDTYPE1}("{TYPENAME}_{FIELDNAME1}", {ISATK}, null);

        /// <summary>{NOTE4}</summary>
        internal {FIELDTYPE1} {FIELDNAME2}Observer => {FIELDNAME1};

        /// <summary>{NOTE}</summary>
        {PUBLIC} {FIELDTYPE} {FIELDNAME2} { get => Get{FIELDNAME2}Value(); set => Check{FIELDNAME2}Value(value, 0); }

        /// <summary>{NOTE1}</summary>
        internal {FIELDTYPE} Sync{FIELDNAME2} { get => Get{FIELDNAME2}Value(); set => Check{FIELDNAME2}Value(value, 1); }

        /// <summary>{NOTE2}</summary>
        internal {FIELDTYPE} SyncID{FIELDNAME2} { get => Get{FIELDNAME2}Value(); set => Check{FIELDNAME2}Value(value, 2); }

        private {FIELDTYPE} Get{FIELDNAME2}Value() => this.{FIELDNAME1}.Value;

        private void Check{FIELDNAME2}Value({FIELDTYPE} value, int type) 
        {
            {JUDGE}
            this.{FIELDNAME1}.Value = value;
            if (type == 0)
                CheckUpdate({INDEX});
            else if (type == 1)
                {FIELDNAME2}Call(false);
            else if (type == 2)
                {FIELDNAME2}Call(true);
            OnValueChanged?.Invoke({RPCHASHTYPE}.{RPCHASHVALUE}, value);
        }

        /// <summary>{NOTE3}</summary>
        public void {FIELDNAME2}Call(bool syncId = false)
        {
            {VARSET}
            object[] objects;
            if (syncId) objects = new object[] { this[{CLIENT}.{TYPENAME}_SyncID], {VARSET1} };
            else objects = new object[] { {VARSET1} };
#if SERVER
            CheckUpdate({INDEX});
            {CLIENT}.OnSyncProperty?.Invoke(client, NetCmd.SyncPropertyData, (ushort){RPCHASHTYPE}.{RPCHASHVALUE}, objects);
#else
            {CLIENT}.Client.SendRT(NetCmd.SyncPropertyData, (ushort){RPCHASHTYPE}.{RPCHASHVALUE}, objects);
#endif
        }

        [Rpc(hash = (ushort){RPCHASHTYPE}.{RPCHASHVALUE})]
        private void {FIELDNAME2}Rpc({FIELDTYPE} value)//重写NetPlayer的OnStart方法来处理客户端自动同步到服务器数据库, 方法内部添加AddRpc(data({TYPENAME}));收集Rpc
        {
            {FIELDNAME2} = value;
        }
    [split] 

        public {TYPENAME}() { }

    #if SERVER
        public {TYPENAME}(params object[] parms) : base()
        {
            NewTableRow(parms);
        }
        public void NewTableRow()
        {
            RowState = DataRowState.Added;
            {DBNAME}.I.Update(this);
        }
        public object GetDefaultValue(Type type)
        {
            return type.IsValueType ? Activator.CreateInstance(type) : null;
        }
        public void NewTableRow(params object[] parms)
        {
            if (parms == null)
                return;
            if (parms.Length == 0)
                return;
            for (int i = 0; i < parms.Length; i++)
            {
                if (parms[i] == null)
                    continue;
                this[i] = parms[i];
            }
            RowState = DataRowState.Added;
            {DBNAME}.I.Update(this);
        }
        public string GetCellNameAndTextLength(int index, out uint length)
        {
            switch (index)
            {
    [split] 
                case {INDEX}: length = {TEXTLENGTH}; return "{INDEXNAME}";
    [split] 
            }
            throw new Exception("错误");
        }
    #endif

        public object this[int index]
        {
            get
            {
                switch (index)
                {
    [split] 
                    case {INDEX}: return this.{INDEXNAME};
    [split] 
                }
                throw new Exception("错误");
            }
            set
            {
                switch (index)
                {
    [split] 
                    case {INDEX}:
                        {ADDORCUTROW}
                        break;
    [split] 
                }
            }
        }

    #if SERVER
        public void Delete(bool immediately = false)
        {
            if (immediately)
            {
                var sb = new StringBuilder();
                DeletedSql(sb);
                _ = {DBNAME}.I.ExecuteNonQuery(sb.ToString(), null);
            }
            else
            {
                RowState = DataRowState.Detached;
                {DBNAME}.I.Update(this);
            }
        }

        /// <summary>
        /// 查询1: Query("`{KEYNAME1}`=1");
        /// <para></para>
        /// 查询2: Query("`{KEYNAME1}`=1 and `index`=1");
        /// <para></para>
        /// 查询3: Query("`{KEYNAME1}`=1 or `index`=1");
        /// </summary>
        /// <param name="filterExpression"></param>
        /// <returns></returns>
        public static {TYPENAME} Query(string filterExpression)
        {
            var cmdText = $"select * from {TABLENAME} where {filterExpression}; ";
            var data = {DBNAME}.I.ExecuteQuery<{TYPENAME}>(cmdText);
            return data;
        }
        /// <summary>
        /// 查询1: Query("`{KEYNAME1}`=1");
        /// <para></para>
        /// 查询2: Query("`{KEYNAME1}`=1 and `index`=1");
        /// <para></para>
        /// 查询3: Query("`{KEYNAME1}`=1 or `index`=1");
        /// </summary>
        /// <param name="filterExpression"></param>
        /// <returns></returns>
        public static async UniTask<{TYPENAME}> QueryAsync(string filterExpression)
        {
            var cmdText = $"select * from {TABLENAME} where {filterExpression}; ";
            var data = await {DBNAME}.I.ExecuteQueryAsync<{TYPENAME}>(cmdText);
            return data;
        }
        public static {TYPENAME}[] QueryList(string filterExpression)
        {
            var cmdText = $"select * from {TABLENAME} where {filterExpression}; ";
            var datas = {DBNAME}.I.ExecuteQueryList<{TYPENAME}>(cmdText);
            return datas;
        }
        public static async UniTask<{TYPENAME}[]> QueryListAsync(string filterExpression)
        {
            var cmdText = $"select * from {TABLENAME} where {filterExpression}; ";
            var datas = await {DBNAME}.I.ExecuteQueryListAsync<{TYPENAME}>(cmdText);
            return datas;
        }
        public void Update()
        {
            if (RowState == DataRowState.Deleted | RowState == DataRowState.Detached | RowState == DataRowState.Added | RowState == 0) return;
    [split] 
            RowState = DataRowState.Modified;
            {DBNAME}.I.Update(this);
    [split] 
        }
    #endif

        public void Init(DataRow row)
        {
            RowState = DataRowState.Unchanged;
    [split] 
            if (row[{INDEX}] is {FIELDTYPE} {FIELDNAME1})
                {INIT}
    [split] 
        }

        public void AddedSql(StringBuilder sb)
        {
    #if SERVER
    [TREAT]
            BulkLoaderBuilder(sb);
    [TREAT]

    [TREAT]
            RowState = DataRowState.Unchanged;
    #endif
        }

        public void ModifiedSql(StringBuilder sb)
        {
    #if SERVER
            if (RowState == DataRowState.Detached | RowState == DataRowState.Deleted | RowState == DataRowState.Added | RowState == 0)
                return;
            BulkLoaderBuilder(sb);
            RowState = DataRowState.Unchanged;
    #endif
        }

        public void DeletedSql(StringBuilder sb)
        {
    #if SERVER
            if (RowState == DataRowState.Deleted)
                return;
            string cmdText = $"DELETE FROM {TABLENAME} {CheckSqlKey(0, {KEYNAME1})}";
            sb.Append(cmdText);
            RowState = DataRowState.Deleted;
    #endif
        }

    #if SERVER
        public void BulkLoaderBuilder(StringBuilder sb)
        {
[split] 
            for (int i = 0; i < {COUNT}; i++)
            {
                var name = GetCellNameAndTextLength(i, out var length);
                var value = this[i];
                if (value == null) //空的值会导致sql语句错误
                {
                    sb.Append(@"\N|");
                    continue;
                }
                if (value is string text)
                {
                    {DBNAME}.I.CheckStringValue(ref text, length);
                    sb.Append(text + "|");
                }
                else if (value is DateTime dateTime)
                {
                    sb.Append(dateTime.ToString("yyyy-MM-dd HH:mm:ss") + "|");
                }
                else if (value is bool boolVal)
                {
                    sb.Append(boolVal ? "1|" : "0|");
                }
                else if (value is byte[] buffer)
                {
                    var base64Str = Convert.ToBase64String(buffer, Base64FormattingOptions.None);
                    if (buffer.Length >= length)
                    {
                        NDebug.LogError($"{TABLENAME}表{name}列长度溢出!");
                        sb.Append(@"\N|");
                        continue;
                    }
                    sb.Append(base64Str + "|");
                }
                else 
                {
                    sb.Append(value + "|");
                }
            }
            sb.AppendLine();
[split] 
            string keyText = "";
            string valueText = "";
            for (int i = 0; i < {COUNT}; i++)
            {
                var name = GetCellNameAndTextLength(i, out var length);
                var value = this[i];
                if (value == null) //空的值会导致sql语句错误
                    continue;
                keyText += $"`{name}`,";
                if (value is string text)
                {
                    {DBNAME}.I.CheckStringValue(ref text, length);
                    valueText += $"'{text}',";
                }
                else if (value is DateTime dateTime)
                {
                    valueText += $"'{dateTime.ToString("yyyy-MM-dd HH:mm:ss")}',";
                }
                else if (value is bool boolVal)
                {
                    valueText += $"'{boolVal}',";
                }
                else if (value is byte[] buffer)
                {
                    var base64Str = Convert.ToBase64String(buffer, Base64FormattingOptions.None);
                    if (buffer.Length >= length)
                    {
                        NDebug.LogError($"{TABLENAME}表{name}列长度溢出!");
                        continue;
                    }
                    valueText += $"'{base64Str}',";
                }
                else 
                {
                    valueText += $"{value},";
                }
            }
            keyText = keyText.TrimEnd(',');
            valueText = valueText.TrimEnd(',');
            if (!string.IsNullOrEmpty(keyText) & !string.IsNullOrEmpty(valueText))
            {
                sb.Append($"REPLACE INTO {TABLENAME} ({keyText}) VALUES ({valueText});");
                sb.AppendLine();
            }
[split] 
        }
    #endif

    #if SERVER
        private string CheckSqlKey(int column, object value)
        {
            var name = GetCellNameAndTextLength(column, out var length);
            if (value == null) //空的值会导致sql语句错误
                return "";
            if (value is string text)
            {
                {DBNAME}.I.CheckStringValue(ref text, length);
                return $" WHERE `{name}`='{text}'; ";
            }
            else if (value is DateTime)
                return $" WHERE `{name}`='{value}'; ";
            else if (value is byte[])
                return "";
            return $" WHERE `{name}`={value}; ";
        }
    #endif

        private void CheckUpdate(int cellIndex)
        {
#if SERVER
            if (RowState == DataRowState.Deleted | RowState == DataRowState.Detached) return;
            if (RowState != DataRowState.Added & RowState != 0)//如果还没初始化或者创建新行,只能修改值不能更新状态
                RowState = DataRowState.Modified;
            {DBNAME}.I.Update(this);
#endif
        }

        public override string ToString()
        {
            return $"{TOSTRING}";
        }
    }
{NAMESPACE_END}